// components/chat/AIModelManager.js
// AIÊ®°ÂûãÁÆ°ÁêÜÂô® - ‰∏ªÂÖ•Âè£ÁªÑ‰ª∂ÔºåÁ±ª‰ººGoogle AI StudioÈ£éÊ†º

import React, { useState, useEffect, useRef, useCallback } from "react";
import ModelSettingsModal from "./ModelSettingsModal";
import {
  models,
  DEFAULT_MODEL_ID,
  MODEL_STATUS,
  getModelById,
  getAvailableModels,
  STORAGE_KEYS
} from "../../config/models.js";

const AIModelManager = ({ onModelChange, currentModelId = null }) => {
  // === State Management ===
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [availableModels] = useState(getAvailableModels());
  const [selectedModelId, setSelectedModelId] = useState(currentModelId || DEFAULT_MODEL_ID);
  const [apiKeys, setApiKeys] = useState({});
  const [modelStatuses, setModelStatuses] = useState({});

  // ‰ΩøÁî®refÊù•Ë∑üË∏™ÊòØÂê¶Â∑≤ÁªèÂàùÂßãÂåñÔºåÈÅøÂÖçÈáçÂ§çÊâßË°å
  const hasInitialized = useRef(false);

  // === Effects ===

  // ÂàùÂßãÂåñÔºö‰ªélocalStorageÂä†ËΩΩÊï∞ÊçÆ
  useEffect(() => {
    // Âä†ËΩΩ‰øùÂ≠òÁöÑÊ®°ÂûãÈÄâÊã©
    const savedModelId = localStorage.getItem(STORAGE_KEYS.SELECTED_MODEL);
    if (savedModelId && getModelById(savedModelId)) {
      setSelectedModelId(savedModelId);
    }

    // Âä†ËΩΩ‰øùÂ≠òÁöÑAPIÂØÜÈí•
    try {
      const savedApiKeys = localStorage.getItem(STORAGE_KEYS.API_KEYS);
      if (savedApiKeys) {
        setApiKeys(JSON.parse(savedApiKeys));
      }
    } catch (error) {
      console.error("Âä†ËΩΩAPIÂØÜÈí•Â§±Ë¥•:", error);
    }

    // Âä†ËΩΩ‰øùÂ≠òÁöÑÊ®°ÂûãÁä∂ÊÄÅ
    try {
      const savedStatuses = localStorage.getItem(STORAGE_KEYS.MODEL_STATUSES);
      if (savedStatuses) {
        setModelStatuses(JSON.parse(savedStatuses));
      }
    } catch (error) {
      console.error("Âä†ËΩΩÊ®°ÂûãÁä∂ÊÄÅÂ§±Ë¥•:", error);
    }
  }, []);

  // ÂàùÂßãÈ™åËØÅÊâÄÊúâÊ®°ÂûãÁä∂ÊÄÅ - Âè™Âú®ÁªÑ‰ª∂È¶ñÊ¨°ÊåÇËΩΩÊó∂ÊâßË°å
  useEffect(() => {
    if (hasInitialized.current) return;

    const initializeModelStatuses = async () => {
      console.log("üîç ÂàùÂßãÂåñÊ®°ÂûãÁä∂ÊÄÅÊ£ÄÊü•...");
      hasInitialized.current = true;

      // Ëé∑ÂèñÂΩìÂâçÁöÑapiKeysÂÄºÔºàÂõ†‰∏∫stateÂèØËÉΩËøòÊ≤°Êõ¥Êñ∞Ôºâ
      const currentApiKeys = JSON.parse(localStorage.getItem(STORAGE_KEYS.API_KEYS) || '{}');

      for (const model of availableModels) {
        try {
          // ËÆæÁΩÆ‰∏∫Ê£ÄÊü•‰∏≠Áä∂ÊÄÅ
          setModelStatuses(prev => ({
            ...prev,
            [model.id]: MODEL_STATUS.CHECKING
          }));

          const result = await checkModelAvailability(model.id, currentApiKeys[model.id]);

          setModelStatuses(prev => {
            const newStatuses = {
              ...prev,
              [model.id]: result.status
            };

            // ‰øùÂ≠òÂà∞localStorage
            localStorage.setItem(STORAGE_KEYS.MODEL_STATUSES, JSON.stringify(newStatuses));
            return newStatuses;
          });

        } catch (error) {
          console.error(`Ê£ÄÊü•Ê®°Âûã ${model.id} Áä∂ÊÄÅÂ§±Ë¥•:`, error);
          setModelStatuses(prev => ({
            ...prev,
            [model.id]: MODEL_STATUS.UNAVAILABLE
          }));
        }
      }
    };

    // Âª∂ËøüÊâßË°å‰ª•ÈÅøÂÖçÂêØÂä®Êó∂ËøáÂ§öËØ∑Ê±Ç
    const timer = setTimeout(initializeModelStatuses, 1000);
    return () => clearTimeout(timer);
  }, []); // ÁßªÈô§ÊâÄÊúâ‰æùËµñÈ°πÔºåÂè™Âú®ÊåÇËΩΩÊó∂ÊâßË°å‰∏ÄÊ¨°

  // ‰ΩøÁî®useCallbackÂåÖË£ÖonModelChangeÂõûË∞ÉÔºåÈÅøÂÖçÊØèÊ¨°Ê∏≤ÊüìÈÉΩËß¶Âèë
  const handleModelChangeCallback = useCallback((model) => {
    if (onModelChange) {
      onModelChange(model);
    }
  }, [onModelChange]);

  // ÁõëÂê¨selectedModelIdÂèòÂåñÔºåÈÄöÁü•Áà∂ÁªÑ‰ª∂
  useEffect(() => {
    if (selectedModelId) {
      const model = getModelById(selectedModelId);
      handleModelChangeCallback(model);
    }
  }, [selectedModelId, handleModelChangeCallback]);

  // === Core Functions ===

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleModelSelection = (modelId) => {
    setSelectedModelId(modelId);
    // ‰øùÂ≠òÂà∞localStorage
    localStorage.setItem(STORAGE_KEYS.SELECTED_MODEL, modelId);
  };

  const handleSaveAndVerifyApiKey = async (modelId, apiKey) => {
    try {
      // ËÆæÁΩÆÊ£ÄÊü•‰∏≠Áä∂ÊÄÅ
      setModelStatuses(prev => ({
        ...prev,
        [modelId]: MODEL_STATUS.CHECKING
      }));

      // Êõ¥Êñ∞APIÂØÜÈí•Áä∂ÊÄÅ
      const newApiKeys = {
        ...apiKeys,
        [modelId]: apiKey
      };
      setApiKeys(newApiKeys);

      // ‰øùÂ≠òÂà∞localStorage
      localStorage.setItem(STORAGE_KEYS.API_KEYS, JSON.stringify(newApiKeys));

      // Ë∞ÉÁî®È™åËØÅAPI
      const result = await checkModelAvailability(modelId, apiKey);

      // Êõ¥Êñ∞Ê®°ÂûãÁä∂ÊÄÅ
      const newStatuses = {
        ...modelStatuses,
        [modelId]: result.status
      };
      setModelStatuses(newStatuses);

      // ‰øùÂ≠òÁä∂ÊÄÅÂà∞localStorage
      localStorage.setItem(STORAGE_KEYS.MODEL_STATUSES, JSON.stringify(newStatuses));

      return result;

    } catch (error) {
      console.error("È™åËØÅAPIÂØÜÈí•Â§±Ë¥•:", error);

      // ËÆæÁΩÆ‰∏∫‰∏çÂèØÁî®Áä∂ÊÄÅ
      setModelStatuses(prev => ({
        ...prev,
        [modelId]: MODEL_STATUS.UNAVAILABLE
      }));

      return {
        success: false,
        status: MODEL_STATUS.UNAVAILABLE,
        message: "È™åËØÅËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ"
      };
    }
  };

  // Ë∞ÉÁî®ÂêéÁ´ØAPIÊ£ÄÊü•Ê®°ÂûãÂèØÁî®ÊÄß
  const checkModelAvailability = async (modelId, apiKey) => {
    const response = await fetch('/api/check-model-availability', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        modelId,
        apiKey: apiKey || null,
      }),
    });

    if (!response.ok) {
      throw new Error(`APIË∞ÉÁî®Â§±Ë¥•: ${response.status}`);
    }

    return await response.json();
  };

  // === Render ===

  const currentModel = getModelById(selectedModelId);
  const currentStatus = modelStatuses[selectedModelId] || MODEL_STATUS.CHECKING;

  // Áä∂ÊÄÅÊåáÁ§∫Âô®È¢úËâ≤
  const getStatusColor = (status) => {
    switch (status) {
      case MODEL_STATUS.AVAILABLE:
        return '#10b981'; // green-500
      case MODEL_STATUS.UNAVAILABLE:
        return '#ef4444'; // red-500
      case MODEL_STATUS.CHECKING:
        return '#f59e0b'; // amber-500
      case MODEL_STATUS.UNCONFIGURED:
        return '#6b7280'; // gray-500
      default:
        return '#6b7280';
    }
  };

  const styles = {
    container: {
      position: 'relative',
      display: 'inline-block',
    },

    button: {
      display: 'flex',
      alignItems: 'center',
      gap: '12px',
      padding: '12px 16px',
      backgroundColor: '#ffffff',
      border: '1px solid #e5e7eb',
      borderRadius: '8px',
      cursor: 'pointer',
      fontSize: '14px',
      fontWeight: '500',
      color: '#374151',
      transition: 'all 0.2s ease',
      minWidth: '200px',
      ':hover': {
        backgroundColor: '#f9fafb',
        borderColor: '#d1d5db',
      }
    },

    icon: {
      fontSize: '18px',
    },

    modelInfo: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-start',
      flex: 1,
    },

    modelName: {
      fontWeight: '600',
      color: '#111827',
    },

    modelProvider: {
      fontSize: '12px',
      color: '#6b7280',
      marginTop: '2px',
    },

    statusDot: {
      width: '8px',
      height: '8px',
      borderRadius: '50%',
      backgroundColor: getStatusColor(currentStatus),
      marginRight: '4px',
    },

    chevron: {
      fontSize: '12px',
      color: '#9ca3af',
      transform: isModalOpen ? 'rotate(180deg)' : 'rotate(0deg)',
      transition: 'transform 0.2s ease',
    },
  };

  return (
    <div style={styles.container}>
      {/* ‰∏ªÊåâÈíÆ */}
      <button
        onClick={handleOpenModal}
        style={styles.button}
        onMouseEnter={(e) => {
          e.target.style.backgroundColor = '#f9fafb';
          e.target.style.borderColor = '#d1d5db';
        }}
        onMouseLeave={(e) => {
          e.target.style.backgroundColor = '#ffffff';
          e.target.style.borderColor = '#e5e7eb';
        }}
      >
        {/* Ê®°ÂûãÂõæÊ†á */}
        <span style={styles.icon}>üß†</span>

        {/* Ê®°Âûã‰ø°ÊÅØ */}
        <div style={styles.modelInfo}>
          <div style={styles.modelName}>
            <div style={{ display: 'flex', alignItems: 'center' }}>
              <div style={styles.statusDot}></div>
              {currentModel.provider}
            </div>
          </div>
          <div style={styles.modelProvider}>
            {currentModel.modelId}
          </div>
        </div>

        {/* ‰∏ãÊãâÁÆ≠Â§¥ */}
        <span style={styles.chevron}>‚ñº</span>
      </button>

      {/* ËÆæÁΩÆÂºπÁ™ó */}
      <ModelSettingsModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        models={availableModels}
        statuses={modelStatuses}
        apiKeys={apiKeys}
        selectedModelId={selectedModelId}
        onSelectModel={handleModelSelection}
        onSaveApiKey={handleSaveAndVerifyApiKey}
      />
    </div>
  );
};

export default AIModelManager;